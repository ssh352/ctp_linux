// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctp.proto

#include "ctp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace ctp {
class TDF_FUTURE_DATADefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TDF_FUTURE_DATA>
      _instance;
} _TDF_FUTURE_DATA_default_instance_;
}  // namespace ctp
namespace protobuf_ctp_2eproto {
static void InitDefaultsTDF_FUTURE_DATA() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ctp::_TDF_FUTURE_DATA_default_instance_;
    new (ptr) ::ctp::TDF_FUTURE_DATA();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ctp::TDF_FUTURE_DATA::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TDF_FUTURE_DATA =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTDF_FUTURE_DATA}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TDF_FUTURE_DATA.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, szwindcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, szcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, nactionday_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, ntradingday_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, ntime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, nstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, ipreopeninterest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, npreclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, npresettleprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, nopen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, nhigh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, nlow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, nmatch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, ivolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, iturnover_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, iopeninterest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, nclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, nsettleprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, nhighlimited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, nlowlimited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, npredelta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, ncurrdelta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, naskprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, naskvol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, nbidprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, nbidvol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, nauctionprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, nauctionqty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ctp::TDF_FUTURE_DATA, navgprice_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ctp::TDF_FUTURE_DATA)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ctp::_TDF_FUTURE_DATA_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ctp.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tctp.proto\022\003ctp\"\272\004\n\017TDF_FUTURE_DATA\022\022\n\n"
      "szWindCode\030\001 \001(\t\022\016\n\006szCode\030\002 \001(\t\022\022\n\nnAct"
      "ionDay\030\003 \001(\005\022\023\n\013nTradingDay\030\004 \001(\005\022\r\n\005nTi"
      "me\030\005 \001(\005\022\017\n\007nStatus\030\006 \001(\005\022\030\n\020iPreOpenInt"
      "erest\030\007 \001(\003\022\021\n\tnPreClose\030\010 \001(\007\022\027\n\017nPreSe"
      "ttlePrice\030\t \001(\007\022\r\n\005nOpen\030\n \001(\007\022\r\n\005nHigh\030"
      "\013 \001(\007\022\014\n\004nLow\030\014 \001(\007\022\016\n\006nMatch\030\r \001(\007\022\017\n\007i"
      "Volume\030\016 \001(\003\022\021\n\tiTurnover\030\017 \001(\003\022\025\n\riOpen"
      "Interest\030\020 \001(\003\022\016\n\006nClose\030\021 \001(\007\022\024\n\014nSettl"
      "ePrice\030\022 \001(\007\022\024\n\014nHighLimited\030\023 \001(\007\022\023\n\013nL"
      "owLimited\030\024 \001(\007\022\021\n\tnPreDelta\030\025 \001(\005\022\022\n\nnC"
      "urrDelta\030\026 \001(\005\022\021\n\tnAskPrice\030\027 \003(\007\022\017\n\007nAs"
      "kVol\030\030 \003(\007\022\021\n\tnBidPrice\030\031 \003(\007\022\017\n\007nBidVol"
      "\030\032 \003(\007\022\025\n\rnAuctionPrice\030\033 \001(\005\022\023\n\013nAuctio"
      "nQty\030\034 \001(\005\022\021\n\tnAvgPrice\030\035 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 597);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ctp.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ctp_2eproto
namespace ctp {

// ===================================================================

void TDF_FUTURE_DATA::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TDF_FUTURE_DATA::kSzWindCodeFieldNumber;
const int TDF_FUTURE_DATA::kSzCodeFieldNumber;
const int TDF_FUTURE_DATA::kNActionDayFieldNumber;
const int TDF_FUTURE_DATA::kNTradingDayFieldNumber;
const int TDF_FUTURE_DATA::kNTimeFieldNumber;
const int TDF_FUTURE_DATA::kNStatusFieldNumber;
const int TDF_FUTURE_DATA::kIPreOpenInterestFieldNumber;
const int TDF_FUTURE_DATA::kNPreCloseFieldNumber;
const int TDF_FUTURE_DATA::kNPreSettlePriceFieldNumber;
const int TDF_FUTURE_DATA::kNOpenFieldNumber;
const int TDF_FUTURE_DATA::kNHighFieldNumber;
const int TDF_FUTURE_DATA::kNLowFieldNumber;
const int TDF_FUTURE_DATA::kNMatchFieldNumber;
const int TDF_FUTURE_DATA::kIVolumeFieldNumber;
const int TDF_FUTURE_DATA::kITurnoverFieldNumber;
const int TDF_FUTURE_DATA::kIOpenInterestFieldNumber;
const int TDF_FUTURE_DATA::kNCloseFieldNumber;
const int TDF_FUTURE_DATA::kNSettlePriceFieldNumber;
const int TDF_FUTURE_DATA::kNHighLimitedFieldNumber;
const int TDF_FUTURE_DATA::kNLowLimitedFieldNumber;
const int TDF_FUTURE_DATA::kNPreDeltaFieldNumber;
const int TDF_FUTURE_DATA::kNCurrDeltaFieldNumber;
const int TDF_FUTURE_DATA::kNAskPriceFieldNumber;
const int TDF_FUTURE_DATA::kNAskVolFieldNumber;
const int TDF_FUTURE_DATA::kNBidPriceFieldNumber;
const int TDF_FUTURE_DATA::kNBidVolFieldNumber;
const int TDF_FUTURE_DATA::kNAuctionPriceFieldNumber;
const int TDF_FUTURE_DATA::kNAuctionQtyFieldNumber;
const int TDF_FUTURE_DATA::kNAvgPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TDF_FUTURE_DATA::TDF_FUTURE_DATA()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ctp_2eproto::scc_info_TDF_FUTURE_DATA.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ctp.TDF_FUTURE_DATA)
}
TDF_FUTURE_DATA::TDF_FUTURE_DATA(const TDF_FUTURE_DATA& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      naskprice_(from.naskprice_),
      naskvol_(from.naskvol_),
      nbidprice_(from.nbidprice_),
      nbidvol_(from.nbidvol_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szwindcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szwindcode().size() > 0) {
    szwindcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szwindcode_);
  }
  szcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szcode().size() > 0) {
    szcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szcode_);
  }
  ::memcpy(&nactionday_, &from.nactionday_,
    static_cast<size_t>(reinterpret_cast<char*>(&navgprice_) -
    reinterpret_cast<char*>(&nactionday_)) + sizeof(navgprice_));
  // @@protoc_insertion_point(copy_constructor:ctp.TDF_FUTURE_DATA)
}

void TDF_FUTURE_DATA::SharedCtor() {
  szwindcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nactionday_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&navgprice_) -
      reinterpret_cast<char*>(&nactionday_)) + sizeof(navgprice_));
}

TDF_FUTURE_DATA::~TDF_FUTURE_DATA() {
  // @@protoc_insertion_point(destructor:ctp.TDF_FUTURE_DATA)
  SharedDtor();
}

void TDF_FUTURE_DATA::SharedDtor() {
  szwindcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TDF_FUTURE_DATA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TDF_FUTURE_DATA::descriptor() {
  ::protobuf_ctp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ctp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TDF_FUTURE_DATA& TDF_FUTURE_DATA::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ctp_2eproto::scc_info_TDF_FUTURE_DATA.base);
  return *internal_default_instance();
}


void TDF_FUTURE_DATA::Clear() {
// @@protoc_insertion_point(message_clear_start:ctp.TDF_FUTURE_DATA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  naskprice_.Clear();
  naskvol_.Clear();
  nbidprice_.Clear();
  nbidvol_.Clear();
  szwindcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nactionday_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&navgprice_) -
      reinterpret_cast<char*>(&nactionday_)) + sizeof(navgprice_));
  _internal_metadata_.Clear();
}

bool TDF_FUTURE_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ctp.TDF_FUTURE_DATA)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string szWindCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szwindcode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szwindcode().data(), static_cast<int>(this->szwindcode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ctp.TDF_FUTURE_DATA.szWindCode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szcode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szcode().data(), static_cast<int>(this->szcode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ctp.TDF_FUTURE_DATA.szCode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nActionDay = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nactionday_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nTradingDay = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntradingday_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nStatus = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 iPreOpenInterest = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ipreopeninterest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 nPreClose = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &npreclose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 nPreSettlePrice = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &npresettleprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 nOpen = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &nopen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 nHigh = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &nhigh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 nLow = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &nlow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 nMatch = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &nmatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 iVolume = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ivolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 iTurnover = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iturnover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 iOpenInterest = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iopeninterest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 nClose = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &nclose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 nSettlePrice = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &nsettleprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 nHighLimited = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &nhighlimited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 nLowLimited = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &nlowlimited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nPreDelta = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npredelta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nCurrDelta = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncurrdelta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 nAskPrice = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_naskprice())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 2, 186u, input, this->mutable_naskprice())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 nAskVol = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_naskvol())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 197 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 2, 194u, input, this->mutable_naskvol())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 nBidPrice = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_nbidprice())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u /* 205 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 2, 202u, input, this->mutable_nbidprice())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 nBidVol = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_nbidvol())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 213 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 2, 210u, input, this->mutable_nbidvol())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nAuctionPrice = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nauctionprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nAuctionQty = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nauctionqty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nAvgPrice = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &navgprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ctp.TDF_FUTURE_DATA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ctp.TDF_FUTURE_DATA)
  return false;
#undef DO_
}

void TDF_FUTURE_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ctp.TDF_FUTURE_DATA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string szWindCode = 1;
  if (this->szwindcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szwindcode().data(), static_cast<int>(this->szwindcode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ctp.TDF_FUTURE_DATA.szWindCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->szwindcode(), output);
  }

  // string szCode = 2;
  if (this->szcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szcode().data(), static_cast<int>(this->szcode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ctp.TDF_FUTURE_DATA.szCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szcode(), output);
  }

  // int32 nActionDay = 3;
  if (this->nactionday() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nactionday(), output);
  }

  // int32 nTradingDay = 4;
  if (this->ntradingday() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ntradingday(), output);
  }

  // int32 nTime = 5;
  if (this->ntime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ntime(), output);
  }

  // int32 nStatus = 6;
  if (this->nstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nstatus(), output);
  }

  // int64 iPreOpenInterest = 7;
  if (this->ipreopeninterest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->ipreopeninterest(), output);
  }

  // fixed32 nPreClose = 8;
  if (this->npreclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->npreclose(), output);
  }

  // fixed32 nPreSettlePrice = 9;
  if (this->npresettleprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->npresettleprice(), output);
  }

  // fixed32 nOpen = 10;
  if (this->nopen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->nopen(), output);
  }

  // fixed32 nHigh = 11;
  if (this->nhigh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->nhigh(), output);
  }

  // fixed32 nLow = 12;
  if (this->nlow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(12, this->nlow(), output);
  }

  // fixed32 nMatch = 13;
  if (this->nmatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(13, this->nmatch(), output);
  }

  // int64 iVolume = 14;
  if (this->ivolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->ivolume(), output);
  }

  // int64 iTurnover = 15;
  if (this->iturnover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->iturnover(), output);
  }

  // int64 iOpenInterest = 16;
  if (this->iopeninterest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->iopeninterest(), output);
  }

  // fixed32 nClose = 17;
  if (this->nclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(17, this->nclose(), output);
  }

  // fixed32 nSettlePrice = 18;
  if (this->nsettleprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(18, this->nsettleprice(), output);
  }

  // fixed32 nHighLimited = 19;
  if (this->nhighlimited() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(19, this->nhighlimited(), output);
  }

  // fixed32 nLowLimited = 20;
  if (this->nlowlimited() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(20, this->nlowlimited(), output);
  }

  // int32 nPreDelta = 21;
  if (this->npredelta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->npredelta(), output);
  }

  // int32 nCurrDelta = 22;
  if (this->ncurrdelta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->ncurrdelta(), output);
  }

  // repeated fixed32 nAskPrice = 23;
  if (this->naskprice_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(23, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _naskprice_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFixed32Array(
      this->naskprice().data(), this->naskprice_size(), output);
  }

  // repeated fixed32 nAskVol = 24;
  if (this->naskvol_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(24, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _naskvol_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFixed32Array(
      this->naskvol().data(), this->naskvol_size(), output);
  }

  // repeated fixed32 nBidPrice = 25;
  if (this->nbidprice_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(25, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _nbidprice_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFixed32Array(
      this->nbidprice().data(), this->nbidprice_size(), output);
  }

  // repeated fixed32 nBidVol = 26;
  if (this->nbidvol_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(26, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _nbidvol_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFixed32Array(
      this->nbidvol().data(), this->nbidvol_size(), output);
  }

  // int32 nAuctionPrice = 27;
  if (this->nauctionprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->nauctionprice(), output);
  }

  // int32 nAuctionQty = 28;
  if (this->nauctionqty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->nauctionqty(), output);
  }

  // int32 nAvgPrice = 29;
  if (this->navgprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->navgprice(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ctp.TDF_FUTURE_DATA)
}

::google::protobuf::uint8* TDF_FUTURE_DATA::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ctp.TDF_FUTURE_DATA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string szWindCode = 1;
  if (this->szwindcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szwindcode().data(), static_cast<int>(this->szwindcode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ctp.TDF_FUTURE_DATA.szWindCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->szwindcode(), target);
  }

  // string szCode = 2;
  if (this->szcode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szcode().data(), static_cast<int>(this->szcode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ctp.TDF_FUTURE_DATA.szCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szcode(), target);
  }

  // int32 nActionDay = 3;
  if (this->nactionday() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nactionday(), target);
  }

  // int32 nTradingDay = 4;
  if (this->ntradingday() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ntradingday(), target);
  }

  // int32 nTime = 5;
  if (this->ntime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ntime(), target);
  }

  // int32 nStatus = 6;
  if (this->nstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nstatus(), target);
  }

  // int64 iPreOpenInterest = 7;
  if (this->ipreopeninterest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->ipreopeninterest(), target);
  }

  // fixed32 nPreClose = 8;
  if (this->npreclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->npreclose(), target);
  }

  // fixed32 nPreSettlePrice = 9;
  if (this->npresettleprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->npresettleprice(), target);
  }

  // fixed32 nOpen = 10;
  if (this->nopen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->nopen(), target);
  }

  // fixed32 nHigh = 11;
  if (this->nhigh() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->nhigh(), target);
  }

  // fixed32 nLow = 12;
  if (this->nlow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(12, this->nlow(), target);
  }

  // fixed32 nMatch = 13;
  if (this->nmatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(13, this->nmatch(), target);
  }

  // int64 iVolume = 14;
  if (this->ivolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->ivolume(), target);
  }

  // int64 iTurnover = 15;
  if (this->iturnover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->iturnover(), target);
  }

  // int64 iOpenInterest = 16;
  if (this->iopeninterest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->iopeninterest(), target);
  }

  // fixed32 nClose = 17;
  if (this->nclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(17, this->nclose(), target);
  }

  // fixed32 nSettlePrice = 18;
  if (this->nsettleprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(18, this->nsettleprice(), target);
  }

  // fixed32 nHighLimited = 19;
  if (this->nhighlimited() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(19, this->nhighlimited(), target);
  }

  // fixed32 nLowLimited = 20;
  if (this->nlowlimited() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(20, this->nlowlimited(), target);
  }

  // int32 nPreDelta = 21;
  if (this->npredelta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->npredelta(), target);
  }

  // int32 nCurrDelta = 22;
  if (this->ncurrdelta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->ncurrdelta(), target);
  }

  // repeated fixed32 nAskPrice = 23;
  if (this->naskprice_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      23,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _naskprice_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32NoTagToArray(this->naskprice_, target);
  }

  // repeated fixed32 nAskVol = 24;
  if (this->naskvol_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      24,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _naskvol_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32NoTagToArray(this->naskvol_, target);
  }

  // repeated fixed32 nBidPrice = 25;
  if (this->nbidprice_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      25,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _nbidprice_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32NoTagToArray(this->nbidprice_, target);
  }

  // repeated fixed32 nBidVol = 26;
  if (this->nbidvol_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      26,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _nbidvol_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32NoTagToArray(this->nbidvol_, target);
  }

  // int32 nAuctionPrice = 27;
  if (this->nauctionprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->nauctionprice(), target);
  }

  // int32 nAuctionQty = 28;
  if (this->nauctionqty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->nauctionqty(), target);
  }

  // int32 nAvgPrice = 29;
  if (this->navgprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->navgprice(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ctp.TDF_FUTURE_DATA)
  return target;
}

size_t TDF_FUTURE_DATA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ctp.TDF_FUTURE_DATA)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated fixed32 nAskPrice = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->naskprice_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _naskprice_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated fixed32 nAskVol = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->naskvol_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _naskvol_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated fixed32 nBidPrice = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->nbidprice_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _nbidprice_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated fixed32 nBidVol = 26;
  {
    unsigned int count = static_cast<unsigned int>(this->nbidvol_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _nbidvol_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string szWindCode = 1;
  if (this->szwindcode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szwindcode());
  }

  // string szCode = 2;
  if (this->szcode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szcode());
  }

  // int32 nActionDay = 3;
  if (this->nactionday() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nactionday());
  }

  // int32 nTradingDay = 4;
  if (this->ntradingday() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ntradingday());
  }

  // int32 nTime = 5;
  if (this->ntime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ntime());
  }

  // int32 nStatus = 6;
  if (this->nstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nstatus());
  }

  // int64 iPreOpenInterest = 7;
  if (this->ipreopeninterest() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ipreopeninterest());
  }

  // fixed32 nPreClose = 8;
  if (this->npreclose() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 nPreSettlePrice = 9;
  if (this->npresettleprice() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 nOpen = 10;
  if (this->nopen() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 nHigh = 11;
  if (this->nhigh() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 nLow = 12;
  if (this->nlow() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 nMatch = 13;
  if (this->nmatch() != 0) {
    total_size += 1 + 4;
  }

  // int64 iVolume = 14;
  if (this->ivolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ivolume());
  }

  // int64 iTurnover = 15;
  if (this->iturnover() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->iturnover());
  }

  // int64 iOpenInterest = 16;
  if (this->iopeninterest() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->iopeninterest());
  }

  // fixed32 nClose = 17;
  if (this->nclose() != 0) {
    total_size += 2 + 4;
  }

  // fixed32 nSettlePrice = 18;
  if (this->nsettleprice() != 0) {
    total_size += 2 + 4;
  }

  // fixed32 nHighLimited = 19;
  if (this->nhighlimited() != 0) {
    total_size += 2 + 4;
  }

  // fixed32 nLowLimited = 20;
  if (this->nlowlimited() != 0) {
    total_size += 2 + 4;
  }

  // int32 nPreDelta = 21;
  if (this->npredelta() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npredelta());
  }

  // int32 nCurrDelta = 22;
  if (this->ncurrdelta() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ncurrdelta());
  }

  // int32 nAuctionPrice = 27;
  if (this->nauctionprice() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nauctionprice());
  }

  // int32 nAuctionQty = 28;
  if (this->nauctionqty() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nauctionqty());
  }

  // int32 nAvgPrice = 29;
  if (this->navgprice() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->navgprice());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TDF_FUTURE_DATA::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ctp.TDF_FUTURE_DATA)
  GOOGLE_DCHECK_NE(&from, this);
  const TDF_FUTURE_DATA* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TDF_FUTURE_DATA>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ctp.TDF_FUTURE_DATA)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ctp.TDF_FUTURE_DATA)
    MergeFrom(*source);
  }
}

void TDF_FUTURE_DATA::MergeFrom(const TDF_FUTURE_DATA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ctp.TDF_FUTURE_DATA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  naskprice_.MergeFrom(from.naskprice_);
  naskvol_.MergeFrom(from.naskvol_);
  nbidprice_.MergeFrom(from.nbidprice_);
  nbidvol_.MergeFrom(from.nbidvol_);
  if (from.szwindcode().size() > 0) {

    szwindcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szwindcode_);
  }
  if (from.szcode().size() > 0) {

    szcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szcode_);
  }
  if (from.nactionday() != 0) {
    set_nactionday(from.nactionday());
  }
  if (from.ntradingday() != 0) {
    set_ntradingday(from.ntradingday());
  }
  if (from.ntime() != 0) {
    set_ntime(from.ntime());
  }
  if (from.nstatus() != 0) {
    set_nstatus(from.nstatus());
  }
  if (from.ipreopeninterest() != 0) {
    set_ipreopeninterest(from.ipreopeninterest());
  }
  if (from.npreclose() != 0) {
    set_npreclose(from.npreclose());
  }
  if (from.npresettleprice() != 0) {
    set_npresettleprice(from.npresettleprice());
  }
  if (from.nopen() != 0) {
    set_nopen(from.nopen());
  }
  if (from.nhigh() != 0) {
    set_nhigh(from.nhigh());
  }
  if (from.nlow() != 0) {
    set_nlow(from.nlow());
  }
  if (from.nmatch() != 0) {
    set_nmatch(from.nmatch());
  }
  if (from.ivolume() != 0) {
    set_ivolume(from.ivolume());
  }
  if (from.iturnover() != 0) {
    set_iturnover(from.iturnover());
  }
  if (from.iopeninterest() != 0) {
    set_iopeninterest(from.iopeninterest());
  }
  if (from.nclose() != 0) {
    set_nclose(from.nclose());
  }
  if (from.nsettleprice() != 0) {
    set_nsettleprice(from.nsettleprice());
  }
  if (from.nhighlimited() != 0) {
    set_nhighlimited(from.nhighlimited());
  }
  if (from.nlowlimited() != 0) {
    set_nlowlimited(from.nlowlimited());
  }
  if (from.npredelta() != 0) {
    set_npredelta(from.npredelta());
  }
  if (from.ncurrdelta() != 0) {
    set_ncurrdelta(from.ncurrdelta());
  }
  if (from.nauctionprice() != 0) {
    set_nauctionprice(from.nauctionprice());
  }
  if (from.nauctionqty() != 0) {
    set_nauctionqty(from.nauctionqty());
  }
  if (from.navgprice() != 0) {
    set_navgprice(from.navgprice());
  }
}

void TDF_FUTURE_DATA::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ctp.TDF_FUTURE_DATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDF_FUTURE_DATA::CopyFrom(const TDF_FUTURE_DATA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ctp.TDF_FUTURE_DATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDF_FUTURE_DATA::IsInitialized() const {
  return true;
}

void TDF_FUTURE_DATA::Swap(TDF_FUTURE_DATA* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TDF_FUTURE_DATA::InternalSwap(TDF_FUTURE_DATA* other) {
  using std::swap;
  naskprice_.InternalSwap(&other->naskprice_);
  naskvol_.InternalSwap(&other->naskvol_);
  nbidprice_.InternalSwap(&other->nbidprice_);
  nbidvol_.InternalSwap(&other->nbidvol_);
  szwindcode_.Swap(&other->szwindcode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  szcode_.Swap(&other->szcode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nactionday_, other->nactionday_);
  swap(ntradingday_, other->ntradingday_);
  swap(ntime_, other->ntime_);
  swap(nstatus_, other->nstatus_);
  swap(ipreopeninterest_, other->ipreopeninterest_);
  swap(npreclose_, other->npreclose_);
  swap(npresettleprice_, other->npresettleprice_);
  swap(nopen_, other->nopen_);
  swap(nhigh_, other->nhigh_);
  swap(nlow_, other->nlow_);
  swap(nmatch_, other->nmatch_);
  swap(ivolume_, other->ivolume_);
  swap(iturnover_, other->iturnover_);
  swap(iopeninterest_, other->iopeninterest_);
  swap(nclose_, other->nclose_);
  swap(nsettleprice_, other->nsettleprice_);
  swap(nhighlimited_, other->nhighlimited_);
  swap(nlowlimited_, other->nlowlimited_);
  swap(npredelta_, other->npredelta_);
  swap(ncurrdelta_, other->ncurrdelta_);
  swap(nauctionprice_, other->nauctionprice_);
  swap(nauctionqty_, other->nauctionqty_);
  swap(navgprice_, other->navgprice_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TDF_FUTURE_DATA::GetMetadata() const {
  protobuf_ctp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ctp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ctp
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ctp::TDF_FUTURE_DATA* Arena::CreateMaybeMessage< ::ctp::TDF_FUTURE_DATA >(Arena* arena) {
  return Arena::CreateInternal< ::ctp::TDF_FUTURE_DATA >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
